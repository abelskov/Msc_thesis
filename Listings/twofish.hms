//Twofish's distinctive features are the use of pre-computed key-dependent S-boxes, and a relatively complex key schedule.
//One half of an n-bit key is used as the actual encryption key and the other half of the n-bit key is used to modify the encryption algorithm (key-dependent S-boxes).
//Twofish borrows some elements from other designs; for example, the pseudo-Hadamard transform (PHT) from the SAFER family of ciphers.
//Twofish has a Feistel structure like DES. Twofish also employs a Maximum Distance Separable matrix.

main()
{
  u32 P0, P1, P2, P3; // Plaintext split into four each of size 32 bit
  u32 M0, M1, M2, M3; // Global key M (user input)

  u32 S0, S1; // Subkey set S (constant throughout encryption and decryption)
  u32 S[2];
  u32 K[40]; // Subkey set K - 40 words (4 input whitening, 4 output whitening, 32 for the 16 rounds)

  // Print values after running encrypt
  u32 E0, E1, E2, E3; // Encrypted values
  u32 D0, D1, D2, D3; // Decrypted values

  call fillWithValues(P0, P1, P2, P3, S, K);
  D0 += P0;
  D1 += P1;
  D2 += P2;
  D3 += P3;
  printf("Original:  [%u32, %u32, %u32, %u32]\n", D0, D1, D2, D3);
  call encrypt(P0, P1, P2, P3, K, S);
  E0 += P0;
  E1 += P1;
  E2 += P2;
  E3 += P3;
  printf("Encrypted: [%u32, %u32, %u32, %u32]\n", E0, E1, E2, E3);
  uncall encrypt(P0, P1, P2, P3, K, S);
  D0 += P0;
  D1 += P1;
  D2 += P2;
  D3 += P3;
  printf("Decrypted: [%u32, %u32, %u32, %u32]\n", D0, D1, D2, D3);
  uncall fillWithValues(P0, P1, P2, P3, S, K);
}

fillWithValues(u32 P0, u32 P1, u32 P2, u32 P3, u32 S[2], u32 K[40]) {
  P0 += 3735928495;
  P1 += 3405691582;
  P2 += 2255827088;
  P3 += 72695827;
  S[0] += 361154685;
  S[1] += 2899051127;
  K[0] += 1388662238; K[1] += 300966400;  K[2] += 2091687242;
  K[3] += 1293634048; K[4] += 3082304016; K[5] += 511511040;
  K[6] += 4003214367; K[7] += 3487648256; K[8] += 4186963705;
  K[9] += 2623224832; K[10] += 363102992;  K[11] += 875187200;
  K[12] += 1112377854; K[13] += 3242664960; K[14] += 823886668;
  K[15] += 4259869184; K[16] += 855799695;  K[17] += 650995200;
  K[18] += 2053923682; K[19] += 3267032576; K[20] += 873576852;
  K[21] += 3648178176; K[22] += 2225975786; K[23] += 2816402432;
  K[24] += 1423087119; K[25] += 2734148096; K[26] += 2797141900;
  K[27] += 2148844544; K[28] += 1786023196; K[29] += 3988452864;
  K[30] += 2458843020; K[31] += 54062592;   K[32] += 2571753150;
  K[33] += 3358670848; K[34] += 130055528;  K[35] += 3970858496;
  K[36] += 535238724;  K[37] += 2243976192; K[38] += 4070060318;
  K[39] += 1768859136;
}

// Read input key from stdIn
read(u32 M0, u32 M1, u32 M2, u32 M3, u32 P0, u32 P1, u32 P2, u32 P3) 
{
  scanf("%u32 %u32 %u32 %u32\n", M0, M1, M2, M3);
  scanf("%u32 %u32 %u32 %u32\n", P0, P1, P2, P3);
}

// Split X into four
// Inplace updates word
// Assumes word is [0, 0, 0, 0]
// Assumes big endian i.e. word[0] is most significant byte
bitsToWord(u32 X, u8 word[4])
{
  u8 tmp;
  for (i=0; 8) {
    word[0] += ((X >> (24 + i)) & 1)*(1 << i);
    word[1] += ((X >> (16 + i)) & 1)*(1 << i);
    word[2] += ((X >> (8 + i))  & 1)*(1 << i);
    word[3] += ((X >> i)        & 1)*(1 << i);
    i++;
  }
}


// Merge word to X
// Inplace updates X
// Assumes X = 0
// Assumes big endian i.e. word[0] is most significant byte
wordToBits(u8 word[4], u32 X)
{
  X += word[0] << 24;
  X += word[1] << 16;
  X += word[2] << 8;
  X += word[3];
}

// For debugging purposes
printRoundKeys(u32 K[40])
{
  for (i=0; 40) {
    printf("%u32  ", K[i]);
    printf("%u32\n", K[i+1]);
    i += 2;
  }
}

// Inplace update on a
// Assumes a and b are 8bit integers that have been extended i.e. 24 zeros on the left
polyMult(u32 a, u32 b)
{
  u32 tmp;
  for (i=0; 8) {
    if((a & 1) > 0) tmp ^= b;
    if((tmp ^ b) < tmp) a-=1;
    b <<= 1;
    a >>= 1;
    i++;
  }
  b >>=8;
  a <-> tmp;
  //printf("%u32 cleaning tmp after polymult\n", tmp);
}

// gfMult is a combination of polyMult and then gfMod
// Inplace updates a i.e. a = (a*b) mod modulus 
// Assumes flags are all 0
gfMult(u32 a, u32 b, u8 flags[8])
{
  u32 modulus;
  u32 tt;
  u32 qq;
  modulus += 0x14D;
  call polyMult(a, b); // Inplace update on a
  modulus <<= 8;
  for (i=0; 8) {
    modulus >>= 1;
    tt += a ^ modulus;
    if (tt < a) flags[i] += 1;

    if (flags[i]) tt -= a ^ modulus;
    if (flags[i]) a ^= modulus;

    if (~flags[i]) tt -= a ^ modulus; // Reset tt

    i++;
  }
  modulus -= 0x14D;
}

// Inplace update on r
// Performs maximum distance seperable (MDS) in Galois Field GF(2**8)
//
// Is called in keysetup(RS, Me/Mo and RS_MOD, r)
// md: RS - matrix
// sd: Me/Mo  - vector
// modulus: RS_MOD - u32 integer (333 in decimal)
// r: Either S0 or S1
// 
// Should return 4 bytes i.e. S0/S1
matrixMultiply(u32 md[32], u8 sd[8], u8 r[4])
{
  u8 t; 
  u32 tmp; // byte values of sd put into tmp to give to gfMult
  u8 flags[8];

  for (j=0; 4) {
    // ---- Compute t -----
    for (k=0; 8) {
      tmp += sd[k];
      call gfMult(md[j*8+k], tmp, flags); // Inplace update on arg0
      t ^= md[j*8+k];
      tmp -= sd[k]; // Reset tmp
      k++;
    }

    // ---- Insert into r -----
    r[3-j] += t; 

    // ---- Reset t -----
    for (k=7; -1) {
      tmp += sd[k];
      t ^= md[j*8+k];
      uncall gfMult(md[j*8+k], tmp, flags); // Reset arg0
      tmp -= sd[k]; // Reset tmp
      k--;
    }
    j++;
  }
}

// Our k is 2 since key/pt is 128 bits
// Assumes S0, S1 and K are zero
keySched(u32 M0, u32 M1, u32 M2, u32 M3, u32 S0, u32 S1, u32 K[40])
{
  u32 Me[2]; u32 Mo[2]; // M_even, M_odd
  u8 vectorS0[8]; u8 vectorS1[8];
  u8 word1[4]; u8 word2[4]; u8 word3[4]; u8 word4[4];
  const u32 rho = 16843009; //0x1010101; // Magic constant
  u32 A, B;
  u32 PA, PB; // Placeholders for A and B

  const u32 RS[32] = [
        0x01,  0xA4,  0x55,  0x87,  0x5A,  0x58,  0xDB, 0x9E,
        0xA4,  0x56,  0x82,  0xF3,  0x1E,  0xC6,  0x68, 0xE5,
        0x02,  0xA1,  0xFC,  0xC1,  0x47,  0xAE,  0x3D, 0x19,
        0xA4,  0x55,  0x87,  0x5A,  0x58,  0xDB,  0x9E, 0x03
       ];

  u32 qq;

  // 333 or 0x14D or 2**8 + 2**6 + 2**3 + 2**2 + 1
  Me[0] += M0; Me[1] += M2;
  Mo[0] += M1; Mo[1] += M3;

  // ----  Generate S0, S1 -----
  // Populate words and vectors
  call bitsToWord(Me[0], word1);
  call bitsToWord(Mo[0], word2);
  call bitsToWord(Me[1], word3);
  call bitsToWord(Mo[1], word4);
  vectorS0[0] += word1[0];
  vectorS0[1] += word1[1];
  vectorS0[2] += word1[2];
  vectorS0[3] += word1[3];
  vectorS0[4] += word2[0];
  vectorS0[5] += word2[1];
  vectorS0[6] += word2[2];
  vectorS0[7] += word2[3];

  vectorS1[0] += word3[0];
  vectorS1[1] += word3[1];
  vectorS1[2] += word3[2];
  vectorS1[3] += word3[3];
  vectorS1[4] += word4[0];
  vectorS1[5] += word4[1];
  vectorS1[6] += word4[2];
  vectorS1[7] += word4[3];

  // Generate S0 and S1
  // u32 md[32], u8 sd[8], u8 r[4]
  // Vectors are correct
  call matrixMultiply(RS, vectorS0, S0);
  call matrixMultiply(RS, vectorS1, S1);

  // Reset vector and bytes
  vectorS0[0] -= word1[0];
  vectorS0[1] -= word1[1];
  vectorS0[2] -= word1[2];
  vectorS0[3] -= word1[3];
  vectorS0[4] -= word2[0];
  vectorS0[5] -= word2[1];
  vectorS0[6] -= word2[2];
  vectorS0[7] -= word2[3];

  vectorS1[0] -= word3[0];
  vectorS1[1] -= word3[1];
  vectorS1[2] -= word3[2];
  vectorS1[3] -= word3[3];
  vectorS1[4] -= word4[0];
  vectorS1[5] -= word4[1];
  vectorS1[6] -= word4[2];
  vectorS1[7] -= word4[3];

  uncall bitsToWord(Me[0], word1);
  uncall bitsToWord(Mo[0], word2);
  uncall bitsToWord(Me[1], word3);
  uncall bitsToWord(Mo[1], word4);

  // ----  Generate K ----

  B += rho;
  for (i=0; 20) {
    // Update A and B, P is placeholder
    call h(A, Me, PA);
    call h(B, Mo, PB);
    B <<= 8;

    // Update K
    K[2*i] += (A + B);
    K[2*i+1] += ((A + 2*B) << 9);

    // Reset A and B
    B >>= 8;
    uncall h(A, Me, PA);
    uncall h(B, Mo, PB);

    // Update A and B for next round
    A += rho * 2;
    B += rho * 2;
    i++;
  }
 
  // Clear locals
  A -= 40 * rho; B -= 41 * rho;
  Me[0] -= M0; Me[1] -= M2;
  Mo[0] -= M1; Mo[1] -= M3;
}

// Uses L to update X
// Assumes Z is 0 when called
h(u32 X, u32 L[2], u32 P)
{
  // X is a 32 bit word
  // L is a list(L[0] - L[K-1]) of 32 bit words (Sbox keys)

  const u8 Q0[256] = [
    0xA9, 0x67, 0xB3, 0xE8, 0x04, 0xFD, 0xA3, 0x76, 
    0x9A, 0x92, 0x80, 0x78, 0xE4, 0xDD, 0xD1, 0x38, 
    0x0D, 0xC6, 0x35, 0x98, 0x18, 0xF7, 0xEC, 0x6C, 
    0x43, 0x75, 0x37, 0x26, 0xFA, 0x13, 0x94, 0x48, 
    0xF2, 0xD0, 0x8B, 0x30, 0x84, 0x54, 0xDF, 0x23, 
    0x19, 0x5B, 0x3D, 0x59, 0xF3, 0xAE, 0xA2, 0x82, 
    0x63, 0x01, 0x83, 0x2E, 0xD9, 0x51, 0x9B, 0x7C, 
    0xA6, 0xEB, 0xA5, 0xBE, 0x16, 0x0C, 0xE3, 0x61, 
    0xC0, 0x8C, 0x3A, 0xF5, 0x73, 0x2C, 0x25, 0x0B, 
    0xBB, 0x4E, 0x89, 0x6B, 0x53, 0x6A, 0xB4, 0xF1, 
    0xE1, 0xE6, 0xBD, 0x45, 0xE2, 0xF4, 0xB6, 0x66, 
    0xCC, 0x95, 0x03, 0x56, 0xD4, 0x1C, 0x1E, 0xD7, 
    0xFB, 0xC3, 0x8E, 0xB5, 0xE9, 0xCF, 0xBF, 0xBA, 
    0xEA, 0x77, 0x39, 0xAF, 0x33, 0xC9, 0x62, 0x71, 
    0x81, 0x79, 0x09, 0xAD, 0x24, 0xCD, 0xF9, 0xD8, 
    0xE5, 0xC5, 0xB9, 0x4D, 0x44, 0x08, 0x86, 0xE7, 
    0xA1, 0x1D, 0xAA, 0xED, 0x06, 0x70, 0xB2, 0xD2, 
    0x41, 0x7B, 0xA0, 0x11, 0x31, 0xC2, 0x27, 0x90, 
    0x20, 0xF6, 0x60, 0xFF, 0x96, 0x5C, 0xB1, 0xAB, 
    0x9E, 0x9C, 0x52, 0x1B, 0x5F, 0x93, 0x0A, 0xEF, 
    0x91, 0x85, 0x49, 0xEE, 0x2D, 0x4F, 0x8F, 0x3B, 
    0x47, 0x87, 0x6D, 0x46, 0xD6, 0x3E, 0x69, 0x64, 
    0x2A, 0xCE, 0xCB, 0x2F, 0xFC, 0x97, 0x05, 0x7A, 
    0xAC, 0x7F, 0xD5, 0x1A, 0x4B, 0x0E, 0xA7, 0x5A, 
    0x28, 0x14, 0x3F, 0x29, 0x88, 0x3C, 0x4C, 0x02, 
    0xB8, 0xDA, 0xB0, 0x17, 0x55, 0x1F, 0x8A, 0x7D, 
    0x57, 0xC7, 0x8D, 0x74, 0xB7, 0xC4, 0x9F, 0x72, 
    0x7E, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34, 
    0x6E, 0x50, 0xDE, 0x68, 0x65, 0xBC, 0xDB, 0xF8, 
    0xC8, 0xA8, 0x2B, 0x40, 0xDC, 0xFE, 0x32, 0xA4, 
    0xCA, 0x10, 0x21, 0xF0, 0xD3, 0x5D, 0x0F, 0x00, 
    0x6F, 0x9D, 0x36, 0x42, 0x4A, 0x5E, 0xC1, 0xE0 
    ];

  const u8 Q1[256] = [
    0x75, 0xF3, 0xC6, 0xF4, 0xDB, 0x7B, 0xFB, 0xC8, 
    0x4A, 0xD3, 0xE6, 0x6B, 0x45, 0x7D, 0xE8, 0x4B, 
    0xD6, 0x32, 0xD8, 0xFD, 0x37, 0x71, 0xF1, 0xE1, 
    0x30, 0x0F, 0xF8, 0x1B, 0x87, 0xFA, 0x06, 0x3F, 
    0x5E, 0xBA, 0xAE, 0x5B, 0x8A, 0x00, 0xBC, 0x9D, 
    0x6D, 0xC1, 0xB1, 0x0E, 0x80, 0x5D, 0xD2, 0xD5, 
    0xA0, 0x84, 0x07, 0x14, 0xB5, 0x90, 0x2C, 0xA3, 
    0xB2, 0x73, 0x4C, 0x54, 0x92, 0x74, 0x36, 0x51, 
    0x38, 0xB0, 0xBD, 0x5A, 0xFC, 0x60, 0x62, 0x96, 
    0x6C, 0x42, 0xF7, 0x10, 0x7C, 0x28, 0x27, 0x8C, 
    0x13, 0x95, 0x9C, 0xC7, 0x24, 0x46, 0x3B, 0x70, 
    0xCA, 0xE3, 0x85, 0xCB, 0x11, 0xD0, 0x93, 0xB8, 
    0xA6, 0x83, 0x20, 0xFF, 0x9F, 0x77, 0xC3, 0xCC, 
    0x03, 0x6F, 0x08, 0xBF, 0x40, 0xE7, 0x2B, 0xE2, 
    0x79, 0x0C, 0xAA, 0x82, 0x41, 0x3A, 0xEA, 0xB9, 
    0xE4, 0x9A, 0xA4, 0x97, 0x7E, 0xDA, 0x7A, 0x17, 
    0x66, 0x94, 0xA1, 0x1D, 0x3D, 0xF0, 0xDE, 0xB3, 
    0x0B, 0x72, 0xA7, 0x1C, 0xEF, 0xD1, 0x53, 0x3E, 
    0x8F, 0x33, 0x26, 0x5F, 0xEC, 0x76, 0x2A, 0x49, 
    0x81, 0x88, 0xEE, 0x21, 0xC4, 0x1A, 0xEB, 0xD9, 
    0xC5, 0x39, 0x99, 0xCD, 0xAD, 0x31, 0x8B, 0x01, 
    0x18, 0x23, 0xDD, 0x1F, 0x4E, 0x2D, 0xF9, 0x48, 
    0x4F, 0xF2, 0x65, 0x8E, 0x78, 0x5C, 0x58, 0x19, 
    0x8D, 0xE5, 0x98, 0x57, 0x67, 0x7F, 0x05, 0x64, 
    0xAF, 0x63, 0xB6, 0xFE, 0xF5, 0xB7, 0x3C, 0xA5, 
    0xCE, 0xE9, 0x68, 0x44, 0xE0, 0x4D, 0x43, 0x69, 
    0x29, 0x2E, 0xAC, 0x15, 0x59, 0xA8, 0x0A, 0x9E, 
    0x6E, 0x47, 0xDF, 0x34, 0x35, 0x6A, 0xCF, 0xDC, 
    0x22, 0xC9, 0xC0, 0x9B, 0x89, 0xD4, 0xED, 0xAB, 
    0x12, 0xA2, 0x0D, 0x52, 0xBB, 0x02, 0x2F, 0xA9, 
    0xD7, 0x61, 0x1E, 0xB4, 0x50, 0x04, 0xF6, 0xC2, 
    0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xBE, 0x91 
    ];

  const u8 mult5B[256] = [
    0x00, 0x5B, 0xB6, 0xED, 0x05, 0x5E, 0xB3, 0xE8, 
    0x0A, 0x51, 0xBC, 0xE7, 0x0F, 0x54, 0xB9, 0xE2, 
    0x14, 0x4F, 0xA2, 0xF9, 0x11, 0x4A, 0xA7, 0xFC, 
    0x1E, 0x45, 0xA8, 0xF3, 0x1B, 0x40, 0xAD, 0xF6, 
    0x28, 0x73, 0x9E, 0xC5, 0x2D, 0x76, 0x9B, 0xC0, 
    0x22, 0x79, 0x94, 0xCF, 0x27, 0x7C, 0x91, 0xCA, 
    0x3C, 0x67, 0x8A, 0xD1, 0x39, 0x62, 0x8F, 0xD4, 
    0x36, 0x6D, 0x80, 0xDB, 0x33, 0x68, 0x85, 0xDE, 
    0x50, 0x0B, 0xE6, 0xBD, 0x55, 0x0E, 0xE3, 0xB8, 
    0x5A, 0x01, 0xEC, 0xB7, 0x5F, 0x04, 0xE9, 0xB2, 
    0x44, 0x1F, 0xF2, 0xA9, 0x41, 0x1A, 0xF7, 0xAC, 
    0x4E, 0x15, 0xF8, 0xA3, 0x4B, 0x10, 0xFD, 0xA6, 
    0x78, 0x23, 0xCE, 0x95, 0x7D, 0x26, 0xCB, 0x90, 
    0x72, 0x29, 0xC4, 0x9F, 0x77, 0x2C, 0xC1, 0x9A, 
    0x6C, 0x37, 0xDA, 0x81, 0x69, 0x32, 0xDF, 0x84, 
    0x66, 0x3D, 0xD0, 0x8B, 0x63, 0x38, 0xD5, 0x8E, 
    0xA0, 0xFB, 0x16, 0x4D, 0xA5, 0xFE, 0x13, 0x48, 
    0xAA, 0xF1, 0x1C, 0x47, 0xAF, 0xF4, 0x19, 0x42, 
    0xB4, 0xEF, 0x02, 0x59, 0xB1, 0xEA, 0x07, 0x5C, 
    0xBE, 0xE5, 0x08, 0x53, 0xBB, 0xE0, 0x0D, 0x56, 
    0x88, 0xD3, 0x3E, 0x65, 0x8D, 0xD6, 0x3B, 0x60, 
    0x82, 0xD9, 0x34, 0x6F, 0x87, 0xDC, 0x31, 0x6A, 
    0x9C, 0xC7, 0x2A, 0x71, 0x99, 0xC2, 0x2F, 0x74, 
    0x96, 0xCD, 0x20, 0x7B, 0x93, 0xC8, 0x25, 0x7E, 
    0xF0, 0xAB, 0x46, 0x1D, 0xF5, 0xAE, 0x43, 0x18, 
    0xFA, 0xA1, 0x4C, 0x17, 0xFF, 0xA4, 0x49, 0x12, 
    0xE4, 0xBF, 0x52, 0x09, 0xE1, 0xBA, 0x57, 0x0C, 
    0xEE, 0xB5, 0x58, 0x03, 0xEB, 0xB0, 0x5D, 0x06, 
    0xD8, 0x83, 0x6E, 0x35, 0xDD, 0x86, 0x6B, 0x30, 
    0xD2, 0x89, 0x64, 0x3F, 0xD7, 0x8C, 0x61, 0x3A, 
    0xCC, 0x97, 0x7A, 0x21, 0xC9, 0x92, 0x7F, 0x24, 
    0xC6, 0x9D, 0x70, 0x2B, 0xC3, 0x98, 0x75, 0x2E 
    ];

  const u8 multEF[256] = [
    0x00, 0xEF, 0xB7, 0x58, 0x07, 0xE8, 0xB0, 0x5F, 
    0x0E, 0xE1, 0xB9, 0x56, 0x09, 0xE6, 0xBE, 0x51, 
    0x1C, 0xF3, 0xAB, 0x44, 0x1B, 0xF4, 0xAC, 0x43, 
    0x12, 0xFD, 0xA5, 0x4A, 0x15, 0xFA, 0xA2, 0x4D, 
    0x38, 0xD7, 0x8F, 0x60, 0x3F, 0xD0, 0x88, 0x67, 
    0x36, 0xD9, 0x81, 0x6E, 0x31, 0xDE, 0x86, 0x69, 
    0x24, 0xCB, 0x93, 0x7C, 0x23, 0xCC, 0x94, 0x7B, 
    0x2A, 0xC5, 0x9D, 0x72, 0x2D, 0xC2, 0x9A, 0x75, 
    0x70, 0x9F, 0xC7, 0x28, 0x77, 0x98, 0xC0, 0x2F, 
    0x7E, 0x91, 0xC9, 0x26, 0x79, 0x96, 0xCE, 0x21, 
    0x6C, 0x83, 0xDB, 0x34, 0x6B, 0x84, 0xDC, 0x33, 
    0x62, 0x8D, 0xD5, 0x3A, 0x65, 0x8A, 0xD2, 0x3D, 
    0x48, 0xA7, 0xFF, 0x10, 0x4F, 0xA0, 0xF8, 0x17, 
    0x46, 0xA9, 0xF1, 0x1E, 0x41, 0xAE, 0xF6, 0x19, 
    0x54, 0xBB, 0xE3, 0x0C, 0x53, 0xBC, 0xE4, 0x0B, 
    0x5A, 0xB5, 0xED, 0x02, 0x5D, 0xB2, 0xEA, 0x05, 
    0xE0, 0x0F, 0x57, 0xB8, 0xE7, 0x08, 0x50, 0xBF, 
    0xEE, 0x01, 0x59, 0xB6, 0xE9, 0x06, 0x5E, 0xB1, 
    0xFC, 0x13, 0x4B, 0xA4, 0xFB, 0x14, 0x4C, 0xA3, 
    0xF2, 0x1D, 0x45, 0xAA, 0xF5, 0x1A, 0x42, 0xAD, 
    0xD8, 0x37, 0x6F, 0x80, 0xDF, 0x30, 0x68, 0x87, 
    0xD6, 0x39, 0x61, 0x8E, 0xD1, 0x3E, 0x66, 0x89, 
    0xC4, 0x2B, 0x73, 0x9C, 0xC3, 0x2C, 0x74, 0x9B, 
    0xCA, 0x25, 0x7D, 0x92, 0xCD, 0x22, 0x7A, 0x95, 
    0x90, 0x7F, 0x27, 0xC8, 0x97, 0x78, 0x20, 0xCF, 
    0x9E, 0x71, 0x29, 0xC6, 0x99, 0x76, 0x2E, 0xC1, 
    0x8C, 0x63, 0x3B, 0xD4, 0x8B, 0x64, 0x3C, 0xD3, 
    0x82, 0x6D, 0x35, 0xDA, 0x85, 0x6A, 0x32, 0xDD, 
    0xA8, 0x47, 0x1F, 0xF0, 0xAF, 0x40, 0x18, 0xF7, 
    0xA6, 0x49, 0x11, 0xFE, 0xA1, 0x4E, 0x16, 0xF9, 
    0xB4, 0x5B, 0x03, 0xEC, 0xB3, 0x5C, 0x04, 0xEB, 
    0xBA, 0x55, 0x0D, 0xE2, 0xBD, 0x52, 0x0A, 0xE5 
    ];

  u8 yword[4];
  u8 inner[4];
  u8 outer[4];
  u8 y0, y1, y2, y3;
  u8 pword[4];
  u8 Q_idx0;
  u8 Q_idx1;
  u8 Q_idx2;
  u8 Q_idx3;
  u8 y_idx0;
  u8 y_idx1;
  u8 y_idx2;
  u8 y_idx3;

  // Generate local variables needed for MDS matrix multiply
  // We are always in case 2 from opt solution because keysize = 128
  call bitsToWord(X, yword);
  call bitsToWord(L[1], inner);
  call bitsToWord(L[0], outer);
  
  // reverse x
  y_idx0 += yword[3];
  y_idx1 += yword[2];
  y_idx2 += yword[1];
  y_idx3 += yword[0];
 
  Q_idx0 +=      Q0[y_idx0] ^ inner[0];
  Q_idx1 += Q0 [ Q1[y_idx1] ^ inner[1] ];
  Q_idx2 += Q1 [ Q0[y_idx2] ^ inner[2] ];
  Q_idx3 +=      Q1[y_idx3] ^ inner[3];

  y0 += Q1[ Q0 [ Q_idx0 ] ^ outer[0] ];
  y1 += Q0[      Q_idx1   ^ outer[1] ];
  y2 += Q1[      Q_idx2   ^ outer[2] ];
  y3 += Q0[ Q1 [ Q_idx3 ] ^ outer[3] ];

  // Calculate the result in pword 
  pword[0] += multEF[y0] ^ y1 ^         multEF[y2] ^ mult5B[y3];
  pword[1] += multEF[y0] ^ mult5B[y1] ^ y2 ^         multEF[y3];
  pword[2] += mult5B[y0] ^ multEF[y1] ^ multEF[y2] ^ y3;
  pword[3] += y0         ^ multEF[y1] ^ mult5B[y2] ^ mult5B[y3];

  // Save the result in placeholder value P
  call wordToBits(pword, P);

  // Reset local variables
  pword[0] -= multEF[y0] ^ y1         ^ multEF[y2] ^ mult5B[y3];
  pword[1] -= multEF[y0] ^ mult5B[y1] ^ y2         ^ multEF[y3];
  pword[2] -= mult5B[y0] ^ multEF[y1] ^ multEF[y2] ^ y3;
  pword[3] -= y0         ^ multEF[y1] ^ mult5B[y2] ^ mult5B[y3];

  y0 -= Q1[  Q0 [ Q_idx0 ] ^ outer[0] ];
  y1 -= Q0[       Q_idx1   ^ outer[1] ];
  y2 -= Q1[       Q_idx2   ^ outer[2] ];
  y3 -= Q0[  Q1 [ Q_idx3 ] ^ outer[3] ];

  Q_idx0 -=      Q0[y_idx0] ^ inner[0];
  Q_idx1 -= Q0 [ Q1[y_idx1] ^ inner[1] ];
  Q_idx2 -= Q1 [ Q0[y_idx2] ^ inner[2] ];
  Q_idx3 -=      Q1[y_idx3] ^ inner[3];
  
  y_idx0 -= yword[3];
  y_idx1 -= yword[2];
  y_idx2 -= yword[1];
  y_idx3 -= yword[0];

  uncall bitsToWord(X, yword);
  uncall bitsToWord(L[1], inner);
  uncall bitsToWord(L[0], outer);

  // Swap so that the update becomes inplace on X
  // P will get cleaned up later when we uncall F
  X <-> P;
}

// Uses P as a placeholder for the old X after the inplace update
g(u32 X, u32 S[2], u32 P)
{
  call h(X, S, P);
}


F(u32 R0, u32 R1, u8 r, u32 K[40], u32 S[2], u32 Z, u32 W)
{
  R1 <<= 8;      // ROL(R1, 8) before g
  call g(R0, S, Z); // Inplace update on R0, R1
  call g(R1, S, W); 

  // Pseudo-Hadamard transformation
  // Dont need to and with 0xFFFFFFFF as addition is already modulus 32
  R0 += R1;
  R1 += R0;
  R0 += K[2*r+8];
  R1 += K[2*r+9];
}

// Encrypts one round
enc_round(u32 R0, u32 R1, u32 R2, u32 R3, u8 r, u32 K[40], u32 S[2])
{
  u32 Z; // Placeholder for old R0 after it gets updated in h
  u32 W; // Placeholder for old R1 after it gets updated in h
  call F(R0, R1, r, K, S, Z, W);   // Inplace update on R0, R1
  R3 <<= 1;                  // ROL(R3, 1) before XOR'ing
  R3 ^= R1;
  R2 ^= R0;
  R2 >>= 1;                  // ROR(R2, 1) after XOR'ing
  uncall F(R0, R1, r, K, S, Z, W); // Get back the original R0 and R1
}

encrypt(u32 P0, u32 P1, u32 P2, u32 P3, u32 K[40], u32 S[2])
{
  u32 R0, R1, R2, R3;
  u8 r;

  P0 <-> R0; P1 <-> R1;
  P2 <-> R2; P3 <-> R3;

  // Input whitening
  R0 ^= K[0];
  R1 ^= K[1];
  R2 ^= K[2];
  R3 ^= K[3];
  
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S); r += 1;
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S); r += 1;
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S); r += 1;
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S); r += 1;
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S); r += 1;
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S); r += 1;
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S); r += 1;
  call enc_round(R0, R1, R2, R3, r, K, S); r += 1;
  call enc_round(R2, R3, R0, R1, r, K, S);
  

  // Output whitening
  R2 <-> R0;
  R3 <-> R1;

  R0 ^= K[4]; 
  R1 ^= K[5];
  R2 ^= K[6];
  R3 ^= K[7];

  // Reset variables
  r -= 15;
  P0 <-> R0; P1 <-> R1;
  P2 <-> R2; P3 <-> R3;
}
